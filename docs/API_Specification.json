{
  "title": "The Goddard School Enrollment Management System",
  "version": "1.0.0",
  "description": "REST API Specification for multi-tenant SaaS platform",
  "content": "grade security with built-in features like rate limiting, bot protection, and multiple authentication methods.\n\n#### 2.1.1 Authentication Methods Supported\n\n- **📧 Email & Password**: Traditional email/password authentication\n- **🔗 Magic Links**: Passwordless email authentication\n- **📱 Phone Authentication**: SMS-based login with OTP\n- **🌐 OAuth Providers**: Google, Apple, GitHub, and 20+ other providers\n- **🚪 Single Sign-On (SSO)**: Enterprise SSO integration\n- **👤 Anonymous Sign-in**: Guest access for certain features\n\n#### 2.1.2 Client-Side Authentication Flow\n\n```javascript\n// Initialize Supabase client\nimport { createClient } from '@supabase/supabase-js'\n\nconst supabase = createClient(\n  'https://your-project.supabase.co',\n  'your-anon-key'\n)\n\n// Email & Password Sign Up with School Context\nconst { data, error } = await supabase.auth.signUp({\n  email: 'parent@example.com',\n  password: 'secure_password',\n  options: {\n    data: {\n      first_name: 'John',\n      last_name: 'Doe',\n      school_id: '550e8400-e29b-41d4-a716-446655440000',\n      role: 'parent'\n    }\n  }\n})\n\n// Sign In\nconst { data, error } = await supabase.auth.signInWithPassword({\n  email: 'parent@example.com',\n  password: 'secure_password'\n})\n\n// Magic Link Authentication\nconst { data, error } = await supabase.auth.signInWithOtp({\n  email: 'parent@example.com',\n  options: {\n    emailRedirectTo: 'https://brookside.goddard.com/auth/callback'\n  }\n})\n\n// OAuth Sign In (Google)\nconst { data, error } = await supabase.auth.signInWithOAuth({\n  provider: 'google',\n  options: {\n    redirectTo: 'https://brookside.goddard.com/auth/callback',\n    queryParams: {\n      school_id: '550e8400-e29b-41d4-a716-446655440000'\n    }\n  }\n})\n\n// Get Current Session\nconst { data: { session } } = await supabase.auth.getSession()\n\n// Sign Out\nconst { error } = await supabase.auth.signOut()\n```\n\n### 2.2 User Profile Management\n\nSince Supabase Auth handles core authentication, we use a **profiles table** for extended user data and school context.\n\n#### 2.2.1 Database Schema Pattern\n\n```sql\n-- Profiles table linked to auth.users\nCREATE TABLE profiles (\n  id UUID REFERENCES auth.users(id) ON DELETE CASCADE PRIMARY KEY,\n  school_id UUID REFERENCES schools(id) NOT NULL,\n  role VARCHAR(20) NOT NULL CHECK (role IN ('parent', 'teacher', 'admin', 'super_admin')),\n  first_name VARCHAR(100) NOT NULL,\n  last_name VARCHAR(100) NOT NULL,\n  phone VARCHAR(20),\n  is_active BOOLEAN DEFAULT TRUE,\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW(),\n  \n  -- Indexes for performance\n  CONSTRAINT unique_user_per_school UNIQUE(id, school_id)\n);\n\n-- RLS Policies using Supabase Auth\nALTER TABLE profiles ENABLE ROW LEVEL SECURITY;\n\n-- Users can view their own profile\nCREATE POLICY \"Users can view own profile\" ON profiles\n  FOR SELECT USING (auth.uid() = id);\n\n-- Admins can view profiles in their school\nCREATE POLICY \"Admins can view school profiles\" ON profiles\n  FOR SELECT USING (\n    EXISTS (\n      SELECT 1 FROM profiles admin_profile\n      WHERE admin_profile.id = auth.uid()\n      AND admin_profile.school_id = profiles.school_id\n      AND admin_profile.role IN ('admin', 'super_admin')\n    )\n  );\n```\n\n#### 2.2.2 Profile Creation Trigger\n\n```sql\n-- Automatically create profile when user signs up\nCREATE OR REPLACE FUNCTION public.handle_new_user()\nRETURNS TRIGGER AS $$\nBEGIN\n  INSERT INTO public.profiles (id, school_id, role, first_name, last_name)\n  VALUES (\n    NEW.id,\n    (NEW.raw_user_meta_data->>'school_id')::UUID,\n    COALESCE(NEW.raw_user_meta_data->>'role', 'parent'),\n    NEW.raw_user_meta_data->>'first_name',\n    NEW.raw_user_meta_data->>'last_name'\n  );\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\n-- Trigger on auth.users\nCREATE TRIGGER on_auth_user_created\n  AFTER INSERT ON auth.users\n  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();\n```\n\n### 2.3 Server-Side Authentication\n\nFor server-side API endpoints, verify Supabase JWT tokens and extract user context.\n\n#### 2.3.1 Token Verification (Rust)\n\n```rust\nuse supabase_auth::verify_jwt;\nuse uuid::Uuid;\n\n#[derive(Debug, Clone)]\npub struct AuthContext {\n    pub user_id: Uuid,\n    pub school_id: Uuid,\n    pub role: String,\n    pub email: String,\n}\n\npub async fn verify_supabase_token(token: &str) -> Result<AuthContext, AuthError> {\n    // Verify JWT token with Supabase\n    let claims = verify_jwt(token, &env::var(\"SUPABASE_JWT_SECRET\")?).await?;\n    \n    // Extract user ID from JWT\n    let user_id = Uuid::parse_str(&claims.sub)?;\n    \n    // Get user profile from database\n    let profile = sqlx::query!(\n        \"SELECT school_id, role, first_name, last_name \n         FROM profiles \n         WHERE id = $1 AND is_active = true\",\n        user_id\n    )\n    .fetch_optional(&db_pool)\n    .await?\n    .ok_or(AuthError::UserNotFound)?;\n    \n    Ok(AuthContext {\n        user_id,\n        school_id: profile.school_id,\n        role: profile.role,\n        email: claims.email.unwrap_or_default(),\n    })\n}\n```\n\n### 2.4 School Context Resolution\n\n#### 2.4.1 Get User's School Context\n\n```http\nGET /api/v1/me/school\nAuthorization: Bearer {supabase_jwt_token}\n\nResponse:\n{\n  \"data\": {\n    \"user\": {\n      \"id\": \"550e8400-e29b-41d4-a716-446655440000\",\n      \"email\": \"parent@example.com\",\n      \"role\": \"parent\",\n      \"first_name\": \"John\",\n      \"last_name\": \"Doe\"\n    },\n    \"school\": {\n      \"id\": \"550e8400-e29b-41d4-a716-446655440000\",\n      \"name\": \"Brookside Goddard School\",\n      \"subdomain\": \"brookside\",\n      \"settings\": {\n        \"primary_color\": \"#2563eb\",\n        \"logo_url\": \"https://cdn.goddard.com/schools/brookside/logo.png\"\n      }\n    }\n  }\n}\n```\n\n#### 2.4.2 Update User Profile\n\n```http\nPATCH /api/v1/me/profile\nAuthorization: Bearer {supabase_jwt_token}\nContent-Type: application/json\n\n{\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe-Smith\",\n  \"phone\": \"(555) 123-9999\"\n}\n\nResponse:\n{\n  \"data\": {\n    \"id\": \"550e8400-e29b-41d4-a716-446655440000\",\n    \"first_name\": \"John\",\n    \"last_name\": \"Doe-Smith\",\n    \"phone\": \"(555) 123-9999\",\n    \"updated_at\": \"2024-01-16T10:30:00Z\"\n  }\n}\n```\n\n### 2.5 Role-Based Access Control\n\n| Role | Permissions | Scope | RLS Pattern |\n|------|-------------|-------|-------------|\n| **parent** | View/edit own children, complete forms | Own children only | `auth.uid() = parent_id` |\n| **teacher** | View assigned classroom students | Assigned classrooms | `EXISTS (classroom assignment)` |\n| **admin** | Full school management | Entire school | `school_id = user.school_id` |\n| **super_admin** | System administration | All schools | No restrictions |\n\n### 2.6 Authentication State Management\n\n#### 2.6.1 Session Handling\n\n```javascript\n// Listen for auth state changes\nsupabase.auth.onAuthStateChange((event, session) => {\n  if (event === 'SIGNED_IN') {\n    // User signed in - redirect to dashboard\n    window.location.href = '/dashboard'\n  }\n  \n  if (event === 'SIGNED_OUT') {\n    // User signed out - redirect to login\n    window.location.href = '/login'\n  }\n  \n  if (event === 'TOKEN_REFRESHED') {\n    // Token refreshed automatically\n    console.log('Token refreshed:', session.access_token)\n  }\n})\n\n// Check if user is authenticated\nconst { data: { user } } = await supabase.auth.getUser()\nif (!user) {\n  // Redirect to login\n  window.location.href = '/login'\n}\n```\n\n#### 2.6.2 Password Reset Flow\n\n```javascript\n// Request password reset\nconst { data, error } = await supabase.auth.resetPasswordForEmail(\n  'parent@example.com',\n  {\n    redirectTo: 'https://brookside.goddard.com/reset-password'\n  }\n)\n\n// Handle password reset (on reset page)\nconst { data, error } = await supabase.auth.updateUser({\n  password: 'new_secure_password'\n})\n```\n\n### 2.7 Security Features\n\n#### 2.7.1 Built-in Security\n- **Rate Limiting**: Automatic protection against brute force attacks\n- **Bot Protection**: CAPTCHA integration for suspicious activity  \n- **Email Verification**: Mandatory email verification for new accounts\n- **JWT Security**: Automatic token rotation and secure storage\n- **Session Management**: Configurable session timeouts and persistence\n\n#### 2.7.2 Multi-Factor Authentication\n\n```javascript\n// Enable MFA for user\nconst { data, error } = await supabase.auth.mfa.enroll({\n  factorType: 'totp',\n  friendlyName: 'Goddard School App'\n})\n\n// Verify MFA challenge\nconst { data, error } = await supabase.auth.mfa.challengeAndVerify({\n  factorId: 'factor-id',\n  code: '123456'\n})\n```\n\n### 2.8 Error Handling\n\nComprehensive error handling patterns for Supabase Auth integration.\n\n#### 2.8.1 Client-Side Error Handling\n\n```typescript\ninterface SupabaseAuthError {\n  message: string;\n  status?: number;\n  code?: string;\n}\n\ninterface ProfileError {\n  message: string;\n  details?: string;\n}\n\n// Comprehensive auth error handling\nconst handleSupabaseAuthError = (error: SupabaseAuthError): string => {\n  // Authentication errors\n  if (error.message.includes('Invalid login credentials')) {\n    return 'Invalid email or password. Please check your credentials.",
  "file_path": "goddard-web-main\\goddard-web-main\\docs\\API_Specification.md",
  "created_at": "2024-01-16T20:00:00Z"
}